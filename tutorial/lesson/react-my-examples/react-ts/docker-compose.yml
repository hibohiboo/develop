# lesson_buildtool_react_tsというコンテナ名で作成
lesson_buildtool_react_ts:
  # webpackディレクトリ内のDockerfileビルド
  build: ./webpack
  # webpackを使用するディレクトリを共有する。
  volumes:
    # ビルドするソースファイル
    - ./src:/app/src
    # ビルドファイルの出力先
    - ./dist:/app/dist
    # 開発用サーバのホームページに使用するhtml用ディレクトリ
    - ./public:/app/public
    # コンテナ上のpackage.jsonを上書き
    - ./webpack/package.json:/app/package.json
    # webpackの設定ファイル
    - ./webpack/webpack.config.js:/app/webpack.config.js
    # typescriptの設定ファイル
    - ./webpack/tsconfig.json:/app/tsconfig.json
  # ホストのポート8080をコンテナのポート8080にポートフォワーディング
  ports:
    - "8080:8080" # ホスト:コンテナでポート指定
  # docker-compose run を行ったときにコンテナ上で下のコマンドを行う
  command: [npm, run, start]

# document作成
lesson_doc_tool:
  build: ./typedoc
  volumes:
    # ビルドするソースファイル
    - ./src:/my_typedoc/src
    # ビルドファイルの出力先
    - ./typedoc/docs:/my_typedoc/dist
    # コンテナ上のpackage.jsonを上書き
    - ./typedoc/package.json:/my_typedoc/package.json
    # typescriptの設定ファイル
    - ./webpack/tsconfig.json:/app/tsconfig.json

# lint-tool
lesson_tslint_tool:
  build: ./tslint
  volumes:
    # ビルドするソースファイル
    - ./src:/my_lint/src
    # コンテナ上のpackage.jsonを上書き
    - ./tslint/package.json:/my_lint/package.json
    # tslint設定ファイル
    - ./tslint/tslint.json:/my_lint/tslint.json
    # typescriptの設定ファイル
    - ./webpack/tsconfig.json:/lint/tsconfig.json

lesson_eslint_tool:
  build: ./eslint
  volumes:
    # ビルドするソースファイル
    - ./src:/my_lint/src
    # eslint設定ファイル
    - ./eslint/.eslintrc.json:/my_lint/.eslintrc.json
    # コンテナ上のpackage.jsonを上書き
    - ./eslint/package.json:/my_lint/package.json
